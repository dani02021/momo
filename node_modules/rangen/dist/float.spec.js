"use strict";
/* tslint:disable:no-magic-numbers */
Object.defineProperty(exports, "__esModule", { value: true });
var float_1 = require("./float");
describe('float', function () {
    it('should return number', function () {
        var floatNumber = float_1.float();
        expect(typeof floatNumber).toEqual('number');
    });
    it('should use default values, from 0 - 1', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float();
            expect(floatNumber).toBeGreaterThanOrEqual(0);
            expect(floatNumber).toBeLessThanOrEqual(1);
        }
    });
    it('should work with min param', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float(0.25);
            expect(floatNumber).toBeGreaterThanOrEqual(0.25);
            expect(floatNumber).toBeLessThanOrEqual(1);
        }
    });
    it('should work with min param if it greater then default max', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float(45.25);
            expect(floatNumber).toBeGreaterThanOrEqual(45.25);
            expect(floatNumber).toBeLessThanOrEqual(46);
        }
    });
    it('should not work of min > max', function () {
        expect(function () { return float_1.float(33.66, 2.15); }).toThrowError();
    });
    it('should work with min and max params', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float(50, 60);
            expect(floatNumber).toBeGreaterThanOrEqual(50);
            expect(floatNumber).toBeLessThanOrEqual(60);
        }
    });
    it('should work with negative float numbers', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float(-10.46, -5.33);
            expect(floatNumber).toBeGreaterThanOrEqual(-10.46);
            expect(floatNumber).toBeLessThanOrEqual(-5.33);
        }
    });
    it('should work with fixed param', function () {
        for (var i = 0; i < 10; i++) {
            var floatNumber = float_1.float(2.46123, 2.46123, 3);
            expect(floatNumber.toString().split('.')[1].length).toEqual(3);
        }
    });
    it('should work with fixed and string params', function () {
        for (var i = 0; i < 10; i++) {
            var str = float_1.float(2.46, 5, 4, true);
            expect(typeof str === 'string');
            expect(str.split('.')[1].length).toEqual(4);
        }
    });
});
//# sourceMappingURL=float.spec.js.map