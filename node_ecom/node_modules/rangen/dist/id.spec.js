"use strict";
/* tslint:disable:no-magic-numbers */
Object.defineProperty(exports, "__esModule", { value: true });
var id_1 = require("./id");
describe('id', function () {
    it('should return 7-char string using default params', function () {
        var testId = id_1.id();
        expect(typeof testId).toEqual('string');
        expect(testId.length).toEqual(7);
    });
    it('should return id with provided length', function () {
        var id1 = id_1.id(8);
        expect(id1.length).toEqual(8);
        var id2 = id_1.id(3);
        expect(id2.length).toEqual(3);
    });
    it('should return different value', function () {
        var id1 = id_1.id();
        var id2 = id_1.id();
        expect(id1).not.toEqual(id2);
    });
    it('should use correct set', function () {
        for (var i = 0; i < 10; i++) {
            var testId = id_1.id({ length: 14, charSet: 'alpha' });
            expect(testId.match(/\d+/g)).toEqual(null);
            var testId2 = id_1.id({ length: 14, charSet: 'num' });
            expect(testId2.match(/\d+/g)).not.toEqual(null);
        }
    });
    it('should not work with wrong length', function () {
        expect(function () { return id_1.id(0); }).toThrowError();
        expect(function () { return id_1.id(-1); }).toThrowError();
        expect(function () { return id_1.id(10000); }).toThrowError();
    });
    it('should not work with wrong charSet', function () {
        expect(function () { return id_1.id({ charSet: 'test' }); }).toThrowError();
    });
    it('should use provided str if correct charSet also provided', function () {
        var testId = id_1.id({ length: 14, charSet: 'num', str: 'abcd' });
        expect(testId.match(/\d+/g)).toEqual(null);
    });
});
//# sourceMappingURL=id.spec.js.map